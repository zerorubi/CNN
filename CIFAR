# ============================================================================
# PROYECTO: Clasificaci√≥n de Im√°genes CIFAR-10 con CNN
# Metodolog√≠a: CRISP-DM (Fases 4, 5 y 6)
# ============================================================================

# INSTALACI√ìN DE DEPENDENCIAS
!pip install gdown -q

# IMPORTACI√ìN DE LIBRER√çAS
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow import keras
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import classification_report, confusion_matrix
import gdown
import os
from google.colab import files
import io
from PIL import Image

# Configuraci√≥n de estilo
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 8)

print("=" * 80)
print("PROYECTO: CLASIFICACI√ìN DE IM√ÅGENES CIFAR-10 CON CNN")
print("Metodolog√≠a: CRISP-DM")
print("=" * 80)

# ============================================================================
# FASE 4: MODELADO (MODELING)
# ============================================================================
print("\n" + "=" * 80)
print("FASE 4: MODELADO")
print("=" * 80)

# 4.1 Carga y preparaci√≥n de datos
print("\n[4.1] Cargando dataset CIFAR-10...")
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

# Clases de CIFAR-10
class_names = ['Avi√≥n', 'Autom√≥vil', 'P√°jaro', 'Gato', 'Ciervo',
               'Perro', 'Rana', 'Caballo', 'Barco', 'Cami√≥n']

print(f"‚úì Datos de entrenamiento: {X_train.shape}")
print(f"‚úì Datos de prueba: {X_test.shape}")

# Normalizaci√≥n de datos
X_train = X_train.astype('float32') / 255.0
X_test = X_test.astype('float32') / 255.0

# Codificaci√≥n one-hot de etiquetas
y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)

print("‚úì Normalizaci√≥n completada (rango 0-1)")
print("‚úì Etiquetas codificadas (one-hot encoding)")

# 4.2 Construcci√≥n del modelo CNN
print("\n[4.2] Construyendo arquitectura CNN...")

model = models.Sequential([
    # Bloque Convolucional 1
    layers.Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)),
    layers.BatchNormalization(),
    layers.Conv2D(32, (3, 3), activation='relu', padding='same'),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.25),

    # Bloque Convolucional 2
    layers.Conv2D(64, (3, 3), activation='relu', padding='same'),
    layers.BatchNormalization(),
    layers.Conv2D(64, (3, 3), activation='relu', padding='same'),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.25),

    # Bloque Convolucional 3
    layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
    layers.BatchNormalization(),
    layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.25),

    # Capas Densas
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.BatchNormalization(),
    layers.Dropout(0.5),
    layers.Dense(10, activation='softmax')
])

print("\n‚úì Arquitectura del modelo:")
model.summary()

# 4.3 Compilaci√≥n del modelo
print("\n[4.3] Compilando modelo...")
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)
print("‚úì Optimizador: Adam")
print("‚úì Funci√≥n de p√©rdida: Categorical Crossentropy")
print("‚úì M√©trica: Accuracy")

# 4.4 Entrenamiento del modelo (10 √©pocas)
print("\n[4.4] Entrenando modelo (10 √©pocas)...")
history = model.fit(
    X_train, y_train_cat,
    batch_size=128,
    epochs=20,
    validation_split=0.2,
    verbose=1
)

print("\n‚úì Entrenamiento completado")

# Guardar modelo localmente
model.save('cifar10_cnn_model.h5')
print("‚úì Modelo guardado como 'cifar10_cnn_model.h5'")

# ============================================================================
# FASE 5: EVALUACI√ìN (EVALUATION)
# ============================================================================
print("\n\n" + "=" * 80)
print("FASE 5: EVALUACI√ìN")
print("=" * 80)

# 5.1 Evaluaci√≥n en conjunto de prueba
print("\n[5.1] Evaluando modelo en conjunto de prueba...")
test_loss, test_accuracy = model.evaluate(X_test, y_test_cat, verbose=0)
print(f"\n‚úì P√©rdida en prueba: {test_loss:.4f}")
print(f"‚úì Precisi√≥n en prueba: {test_accuracy*100:.2f}%")

# 5.2 Predicciones
print("\n[5.2] Generando predicciones...")
y_pred = model.predict(X_test, verbose=0)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = y_test.flatten()

# 5.3 Visualizaci√≥n de curvas de aprendizaje
print("\n[5.3] Generando visualizaciones...")

fig, axes = plt.subplots(1, 2, figsize=(15, 5))

# Curva de precisi√≥n
axes[0].plot(history.history['accuracy'], label='Entrenamiento', linewidth=2)
axes[0].plot(history.history['val_accuracy'], label='Validaci√≥n', linewidth=2)
axes[0].set_title('Curva de Precisi√≥n del Modelo', fontsize=14, fontweight='bold')
axes[0].set_xlabel('√âpoca', fontsize=12)
axes[0].set_ylabel('Precisi√≥n', fontsize=12)
axes[0].legend(fontsize=11)
axes[0].grid(True, alpha=0.3)

# Curva de p√©rdida
axes[1].plot(history.history['loss'], label='Entrenamiento', linewidth=2)
axes[1].plot(history.history['val_loss'], label='Validaci√≥n', linewidth=2)
axes[1].set_title('Curva de P√©rdida del Modelo', fontsize=14, fontweight='bold')
axes[1].set_xlabel('√âpoca', fontsize=12)
axes[1].set_ylabel('P√©rdida', fontsize=12)
axes[1].legend(fontsize=11)
axes[1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# 5.4 Matriz de confusi√≥n
print("\n[5.4] Generando matriz de confusi√≥n...")
cm = confusion_matrix(y_true, y_pred_classes)

plt.figure(figsize=(12, 10))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=class_names, yticklabels=class_names,
            cbar_kws={'label': 'Cantidad de predicciones'})
plt.title('Matriz de Confusi√≥n - CIFAR-10 CNN', fontsize=16, fontweight='bold', pad=20)
plt.xlabel('Clase Predicha', fontsize=13, fontweight='bold')
plt.ylabel('Clase Real', fontsize=13, fontweight='bold')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

# 5.5 Reporte de clasificaci√≥n
print("\n[5.5] Reporte de clasificaci√≥n:")
print("\n" + classification_report(y_true, y_pred_classes,
                                   target_names=class_names,
                                   digits=4))

# 5.6 Visualizaci√≥n de predicciones
print("\n[5.6] Visualizando predicciones de ejemplo...")

fig, axes = plt.subplots(3, 5, figsize=(15, 9))
axes = axes.ravel()

# Seleccionar 15 im√°genes aleatorias
indices = np.random.choice(len(X_test), 15, replace=False)

for i, idx in enumerate(indices):
    axes[i].imshow(X_test[idx])
    pred_class = y_pred_classes[idx]
    true_class = y_true[idx]

    color = 'green' if pred_class == true_class else 'red'
    axes[i].set_title(f'Real: {class_names[true_class]}\nPred: {class_names[pred_class]}',
                     color=color, fontsize=10, fontweight='bold')
    axes[i].axis('off')

plt.suptitle('Ejemplos de Predicciones (Verde=Correcto, Rojo=Incorrecto)',
             fontsize=14, fontweight='bold', y=1.02)
plt.tight_layout()
plt.show()

print("\n‚úì Evaluaci√≥n completada exitosamente")

# ============================================================================
# FASE 6: DESPLIEGUE (DEPLOYMENT)
# ============================================================================
print("\n\n" + "=" * 80)
print("FASE 6: DESPLIEGUE")
print("=" * 80)

print("\n[6.1] Sistema de Predicci√≥n Interactivo")
print("\nPuedes hacer predicciones de 2 formas:")
print("1. Usar im√°genes del conjunto de prueba de CIFAR-10")
print("2. Subir tu propia imagen")

# Funci√≥n para predecir desde conjunto de prueba
def predecir_desde_test():
    """Predecir una imagen aleatoria del conjunto de prueba"""
    idx = np.random.randint(0, len(X_test))
    img = X_test[idx]
    true_label = y_true[idx]

    # Predicci√≥n
    pred = model.predict(np.expand_dims(img, axis=0), verbose=0)
    pred_class = np.argmax(pred)
    confidence = np.max(pred) * 100

    # Visualizaci√≥n
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

    # Imagen
    ax1.imshow(img)
    ax1.set_title(f'Imagen de Prueba #{idx}', fontsize=12, fontweight='bold')
    ax1.axis('off')

    # Probabilidades
    colors = ['green' if i == pred_class else 'steelblue' for i in range(10)]
    ax2.barh(class_names, pred[0] * 100, color=colors)
    ax2.set_xlabel('Probabilidad (%)', fontsize=11, fontweight='bold')
    ax2.set_title('Distribuci√≥n de Probabilidades', fontsize=12, fontweight='bold')
    ax2.grid(axis='x', alpha=0.3)

    plt.tight_layout()
    plt.show()

    print(f"\n{'='*60}")
    print(f"üìä RESULTADOS DE LA PREDICCI√ìN")
    print(f"{'='*60}")
    print(f"üè∑Ô∏è  Clase Real: {class_names[true_label]}")
    print(f"ü§ñ Predicci√≥n: {class_names[pred_class]}")
    print(f"üìà Confianza: {confidence:.2f}%")
    print(f"‚úÖ Resultado: {'CORRECTO' if pred_class == true_label else 'INCORRECTO'}")
    print(f"{'='*60}\n")

# Funci√≥n para predecir desde imagen subida
def predecir_imagen_subida():
    """Predecir una imagen subida por el usuario"""
    print("\nüì§ Por favor, sube una imagen (32x32 recomendado, se redimensionar√° autom√°ticamente)")
    uploaded = files.upload()

    for filename in uploaded.keys():
        print(f"\n‚úì Procesando: {filename}")

        # Cargar y procesar imagen
        img = Image.open(io.BytesIO(uploaded[filename]))
        img = img.convert('RGB')
        img = img.resize((32, 32))
        img_array = np.array(img) / 255.0

        # Predicci√≥n
        pred = model.predict(np.expand_dims(img_array, axis=0), verbose=0)
        pred_class = np.argmax(pred)
        confidence = np.max(pred) * 100

        # Visualizaci√≥n
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

        # Imagen
        ax1.imshow(img_array)
        ax1.set_title(f'Imagen Subida: {filename}', fontsize=12, fontweight='bold')
        ax1.axis('off')

        # Probabilidades
        colors = ['green' if i == pred_class else 'steelblue' for i in range(10)]
        ax2.barh(class_names, pred[0] * 100, color=colors)
        ax2.set_xlabel('Probabilidad (%)', fontsize=11, fontweight='bold')
        ax2.set_title('Distribuci√≥n de Probabilidades', fontsize=12, fontweight='bold')
        ax2.grid(axis='x', alpha=0.3)

        plt.tight_layout()
        plt.show()

        print(f"\n{'='*60}")
        print(f"üìä RESULTADOS DE LA PREDICCI√ìN")
        print(f"{'='*60}")
        print(f"ü§ñ Predicci√≥n: {class_names[pred_class]}")
        print(f"üìà Confianza: {confidence:.2f}%")
        print(f"{'='*60}\n")

# Funci√≥n para predicci√≥n m√∫ltiple
def predecir_multiples(n=5):
    """Predecir m√∫ltiples im√°genes del conjunto de prueba"""
    indices = np.random.choice(len(X_test), n, replace=False)

    fig, axes = plt.subplots(1, n, figsize=(3*n, 4))
    if n == 1:
        axes = [axes]

    print(f"\n{'='*60}")
    print(f"üìä PREDICCI√ìN DE {n} IM√ÅGENES ALEATORIAS")
    print(f"{'='*60}\n")

    for i, idx in enumerate(indices):
        img = X_test[idx]
        true_label = y_true[idx]

        # Predicci√≥n
        pred = model.predict(np.expand_dims(img, axis=0), verbose=0)
        pred_class = np.argmax(pred)
        confidence = np.max(pred) * 100

        # Visualizaci√≥n
        axes[i].imshow(img)
        color = 'green' if pred_class == true_label else 'red'
        axes[i].set_title(f'Real: {class_names[true_label]}\nPred: {class_names[pred_class]}\n{confidence:.1f}%',
                         color=color, fontsize=9, fontweight='bold')
        axes[i].axis('off')

        resultado = '‚úÖ' if pred_class == true_label else '‚ùå'
        print(f"Imagen {i+1}: Real={class_names[true_label]}, "
              f"Pred={class_names[pred_class]} ({confidence:.1f}%) {resultado}")

    plt.tight_layout()
    plt.show()
    print(f"{'='*60}\n")

# ============================================================================
# INTERFAZ DE USUARIO
# ============================================================================
print("\n" + "üéØ" * 40)
print("\n‚úÖ SISTEMA LISTO PARA USAR")
print("\nüìã FUNCIONES DISPONIBLES:")
print("‚îÄ" * 60)
print("1Ô∏è‚É£  predecir_desde_test()       - Predice 1 imagen del test")
print("2Ô∏è‚É£  predecir_imagen_subida()    - Sube y predice tu imagen")
print("3Ô∏è‚É£  predecir_multiples(n)       - Predice n im√°genes (default: 5)")
print("‚îÄ" * 60)
print("\nüí° EJEMPLOS DE USO:")
print("   ‚Ä¢ predecir_desde_test()")
print("   ‚Ä¢ predecir_imagen_subida()")
print("   ‚Ä¢ predecir_multiples(10)")
print("\n" + "üéØ" * 40)

# Ejemplo autom√°tico
print("\n\nüöÄ Ejecutando ejemplo autom√°tico...\n")
predecir_multiples(5)

print("\n‚ú® ¬°LISTO! Ahora puedes usar las funciones para hacer tus propias predicciones.")
print("üíæ El modelo est√° guardado como: cifar10_cnn_model.h5")
